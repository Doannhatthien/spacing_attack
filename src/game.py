# ============================================================
# SPACE TYPING GAME - MAIN GAME LOGIC
# ============================================================
# File: game.py
# M√¥ t·∫£: Qu·∫£n l√Ω to√†n b·ªô logic game, render, input handling
# Ch·ª©c nƒÉng ch√≠nh:
#   - Spawn v√† qu·∫£n l√Ω enemies
#   - X·ª≠ l√Ω input t·ª´ b√†n ph√≠m (g√µ t·ª´)
#   - H·ªá th·ªëng lock target
#   - Collision detection (enemy vs ship)
#   - Lives system (3 m·∫°ng)
#   - Screen shake v√† explosion effects
#   - HUD rendering v·ªõi hearts
# ============================================================

import math
import random
import pygame

from .settings import WIDTH, HEIGHT, FPS, WHITE, WORDS, SPAWN_DELAYMS, SHIP_Y
from .utils import load_image, load_sound
from .enemy import Enemy
from .bullet import Bullet
from .explosion import Explosion, ScreenShake
from .ship import draw_ship, draw_rotated_ship

# Constants
YELLOW = (255, 255, 0)


class Game:
    """
    Class ch√≠nh qu·∫£n l√Ω to√†n b·ªô game Space Typing.
    
    Ch·ª©c nƒÉng:
        - Kh·ªüi t·∫°o pygame, window, assets (images, sounds, music)
        - Spawn enemies theo th·ªùi gian
        - X·ª≠ l√Ω input (typing, lock target, backspace, ESC)
        - Update game logic (enemies movement, collision, lives)
        - Render (background, enemies, bullets, explosions, ship, HUD)
        - Game loop ch√≠nh
    """

    def __init__(self, music_file=None, video_background=None, challenge_speed=None):
        """
        Kh·ªüi t·∫°o game.
        
        Args:
            music_file (str, optional): File nh·∫°c n·ªÅn. M·∫∑c ƒë·ªãnh "music3.mp3"
            video_background (VideoBackground, optional): Video l√†m background ƒë·ªông
            challenge_speed (float, optional): T·ªëc ƒë·ªô r∆°i cho Challenge mode
        """
        # Pygame initialization
        pygame.init()
        pygame.key.set_repeat(1, 1)
        pygame.key.start_text_input()
        pygame.mixer.init()

        # Window & Display
        self.win = pygame.display.set_mode((WIDTH, HEIGHT), pygame.HWSURFACE | pygame.DOUBLEBUF | pygame.FULLSCREEN)
        pygame.display.set_caption("Space Typing Game")
        self.clock = pygame.time.Clock()
        self.delta_time = 0
        
        # Video background (n·∫øu c√≥)
        self.video_background = video_background
        
        # Challenge mode speed
        self.challenge_speed = challenge_speed
        self.is_challenge_mode = challenge_speed is not None

        # Font & HUD
        self.font = pygame.font.SysFont("Arial", 32)
        self.score = 0
        self.lives = 3  # Phi thuy·ªÅn c√≥ 3 m·∫°ng
        self.max_lives = 3  # S·ªë m·∫°ng t·ªëi ƒëa
        self.typed_word = ""
        
        # H·ªá th·ªëng va ch·∫°m v·ªõi phi thuy·ªÅn
        self.ship_collision_count = 0  # S·ªë l·∫ßn enemy ch·∫°m phi thuy·ªÅn
        self.ship_invulnerable_timer = 0  # Th·ªùi gian b·∫•t t·ª≠ sau khi b·ªã hit
        self.ship_flash_timer = 0  # Timer cho hi·ªáu ·ª©ng nh·∫•p nh√°y
        
        # Cache cho HUD text ƒë·ªÉ gi·∫£m render calls
        self._hud_cache = {}
        self._last_score = -1
        self._last_lives = -1
        self._last_kills = -1

        # Challenge Mode
        self.kills = 0
        self.target_kills = None
        self.completed = False

        # ============================================================
        # ASSETS - BACKGROUND
        # ============================================================
        try:
            self.background = load_image("backgrounds/background3.jpg", (WIDTH, HEIGHT))
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ t·∫£i background: {e}")
            self.background = None

        # ============================================================
        # ASSETS - IMAGES
        # ============================================================
        try:
            self.explosion_img = load_image("explosion.png", (40, 40))
        except:
            self.explosion_img = None

        # ============================================================
        # ASSETS - SOUND EFFECTS
        # ============================================================
        try:
            self.shoot_sound = load_sound("ban.wav")
            if self.shoot_sound:
                self.shoot_sound.set_volume(0.3)
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ n·∫°p √¢m thanh ban.wav: {e}")
            self.shoot_sound = None

        try:
            self.explosion_sound = load_sound("no.wav")
            if self.explosion_sound:
                self.explosion_sound.set_volume(0.5)
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ n·∫°p √¢m thanh no.wav: {e}")
            self.explosion_sound = None

        # ============================================================
        # BACKGROUND MUSIC
        # ============================================================
        # S·ª≠ d·ª•ng music_file ƒë∆∞·ª£c truy·ªÅn v√†o, ho·∫∑c m·∫∑c ƒë·ªãnh music3.mp3
        music_to_load = music_file if music_file else "music3.mp3"
        
        try:
            self.bg_music = load_sound(music_to_load)
            if self.bg_music:
                self.music_channel = pygame.mixer.Channel(5)
                self.music_channel.set_volume(0.9)
                self.music_channel.play(self.bg_music, loops=-1)
                print(f"[INFO] üéµ Nh·∫°c n·ªÅn ƒëang ph√°t: {music_to_load}")
            else:
                self.music_channel = None
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ ph√°t nh·∫°c n·ªÅn {music_to_load}: {e}")
            self.music_channel = None

        # ============================================================
        # GAME ENTITIES
        # ============================================================
        self.enemies = []
        self.bullets = []
        self.explosions = []
        self.screen_shake = None  # Screen shake effect
        self.last_spawn_ms = pygame.time.get_ticks()
        self.locked = None
        self.angle = 0.0

    # ============================================================
    # PRIVATE UTILITY METHODS
    # ============================================================
    
    def _enemy_center_x(self, enemy):
        """
        T√≠nh to·∫° ƒë·ªô X trung t√¢m c·ªßa enemy ƒë·ªÉ ng·∫Øm b·∫Øn.
        
        Args:
            enemy (Enemy): Enemy c·∫ßn t√≠nh to·∫° ƒë·ªô
            
        Returns:
            int: To·∫° ƒë·ªô X trung t√¢m c·ªßa t·ª´ enemy
        """
        shown = "_" * enemy.progress + enemy.origin_word[enemy.progress:]
        text_width = self.font.size(shown)[0]
        return int(enemy.x + text_width / 2)

    def _update_ship_aim(self):
        """
        C·∫≠p nh·∫≠t g√≥c xoay c·ªßa phi thuy·ªÅn ƒë·ªÉ ng·∫Øm v·ªÅ enemy ƒëang lock.
        N·∫øu kh√¥ng c√≥ lock th√¨ angle = 0 (h∆∞·ªõng th·∫≥ng l√™n).
        """
        if self.locked and self.locked in self.enemies:
            tx = self._enemy_center_x(self.locked)
            ty = self.locked.y
            self.angle = math.atan2(ty - SHIP_Y, tx - (WIDTH // 2))
        else:
            self.angle = 0.0
    
    def _draw_hearts(self, x, y):
        """
        V·∫Ω c√°c icon tr√°i tim th·ªÉ hi·ªán s·ªë m·∫°ng c√≤n l·∫°i.
        
        Args:
            x (int): To·∫° ƒë·ªô X b·∫Øt ƒë·∫ßu v·∫Ω
            y (int): To·∫° ƒë·ªô Y v·∫Ω
            
        Hi·ªÉn th·ªã:
            - ƒê·ªè/H·ªìng: Tim c√≤n m·∫°ng
            - X√°m: Tim ƒë√£ m·∫•t
            - M√†u thay ƒë·ªïi theo s·ªë lives (ƒë·ªè s√°ng khi 1 m·∫°ng)
        """
        heart_size = 12
        heart_spacing = 18
        
        for i in range(self.max_lives):
            heart_x = x + i * heart_spacing
            
            # Ch·ªçn m√†u theo lives c√≤n l·∫°i
            if i < self.lives:
                if self.lives == 1:
                    color = (255, 50, 50)  # ƒê·ªè s√°ng - nguy hi·ªÉm!
                elif self.lives == 2:
                    color = (255, 150, 50)  # Cam - c·∫£nh b√°o
                else:
                    color = (255, 50, 100)  # H·ªìng - kh·ªèe m·∫°nh
            else:
                color = (80, 80, 80)  # X√°m - ƒë√£ m·∫•t
            
            self._draw_heart_shape(self.win, heart_x, y, heart_size, color, filled=(i < self.lives))
    
    def _draw_heart_shape(self, surface, x, y, size, color, filled=True):
        """
        V·∫Ω m·ªôt tr√°i tim b·∫±ng parametric equations.
        
        Args:
            surface (pygame.Surface): Surface ƒë·ªÉ v·∫Ω
            x, y (int): To·∫° ƒë·ªô trung t√¢m tr√°i tim
            size (int): K√≠ch th∆∞·ªõc tr√°i tim
            color (tuple): M√†u RGB
            filled (bool): V·∫Ω solid hay ch·ªâ outline
        """
        points = []
        scale = size / 20.0
        
        # Parametric heart equations
        for t in range(0, 360, 10):
            angle = math.radians(t)
            heart_x = 16 * math.sin(angle) ** 3
            heart_y = -(13 * math.cos(angle) - 5 * math.cos(2*angle) - 
                       2 * math.cos(3*angle) - math.cos(4*angle))
            
            points.append((x + heart_x * scale, y + heart_y * scale))
        
        if filled:
            pygame.draw.polygon(surface, color, points)
        else:
            pygame.draw.polygon(surface, color, points, 2)

    # ============================================================
    # CORE GAME LOGIC METHODS
    # ============================================================
    
    def check_ship_collision(self, enemy):
        """
        Ki·ªÉm tra va ch·∫°m gi·ªØa enemy v√† phi thuy·ªÅn (circle collision).
        
        Args:
            enemy (Enemy): Enemy c·∫ßn ki·ªÉm tra
            
        Returns:
            bool: True n·∫øu va ch·∫°m, False n·∫øu kh√¥ng
        """
        ship_x = WIDTH // 2
        ship_y = SHIP_Y
        ship_radius = 40
        
        dx = enemy.x - ship_x
        dy = enemy.y - ship_y
        distance = math.sqrt(dx * dx + dy * dy)
        
        return distance < ship_radius
    
    def hit_ship(self, enemy):
        """
        X·ª≠ l√Ω khi enemy ch·∫°m v√†o phi thuy·ªÅn.
        
        Args:
            enemy (Enemy): Enemy g√¢y va ch·∫°m
            
        Side effects:
            - Gi·∫£m 1 lives
            - T·∫°o explosion t·∫°i phi thuy·ªÅn
            - Screen shake m·∫°nh
            - X√≥a enemy
            - Unlock n·∫øu enemy ƒëang b·ªã lock
            - B·∫≠t invulnerability (60 frames = 1 gi√¢y)
        """
        if self.ship_invulnerable_timer > 0:
            return
        
        self.lives -= 1
        self.explosions.append(Explosion(WIDTH // 2, SHIP_Y, lifetime_frames=40))
        self.screen_shake = ScreenShake(intensity=20, duration=20)
        
        if self.explosion_sound:
            self.explosion_sound.play()
        
        if enemy in self.enemies:
            self.enemies.remove(enemy)
        
        if enemy is self.locked:
            self.locked = None
            self.typed_word = ""
        
        self.ship_invulnerable_timer = 60
        self.ship_flash_timer = 60
        
        print(f"üí• PHI THUY·ªÄN B·ªä HIT! Lives c√≤n l·∫°i: {self.lives}/3")
    
    def spawn_enemy(self):
        """
        Spawn enemy m·ªõi theo th·ªùi gian (m·ªói SPAWN_DELAYMS milliseconds).
        Enemy t·ª± ƒë·ªông tr√°nh spawn ch·ªìng l√™n nhau qua existing_enemies.
        """
        now = pygame.time.get_ticks()
        if now - self.last_spawn_ms > SPAWN_DELAYMS:
            # Truy·ªÅn challenge_speed n·∫øu ƒëang ·ªü Challenge mode
            new_enemy = Enemy(
                random.choice(WORDS), 
                existing_enemies=self.enemies,
                use_challenge_speed=self.is_challenge_mode,
                challenge_speed=self.challenge_speed
            )
            self.enemies.append(new_enemy)
            self.last_spawn_ms = now

    def destroy_enemy(self, enemy):
        """
        Ph√° h·ªßy enemy khi g√µ ƒë√∫ng h·∫øt t·ª´.
        
        Args:
            enemy (Enemy): Enemy b·ªã ph√° h·ªßy
            
        Side effects:
            - TƒÉng score (+10 cho m·ªói k√Ω t·ª±)
            - TƒÉng kills (d√πng cho Challenge mode)
            - T·∫°o explosion effect
            - Screen shake (c√†ng d√†i t·ª´ c√†ng m·∫°nh)
            - X√≥a enemy kh·ªèi danh s√°ch
            - Unlock n·∫øu ƒëang lock
            - Check win condition (Challenge mode)
        """
        self.score += len(enemy.origin_word) * 10
        self.kills += 1
        
        self.explosions.append(Explosion(enemy.x, enemy.y, lifetime_frames=30))
        
        shake_intensity = min(15, 5 + len(enemy.origin_word))
        self.screen_shake = ScreenShake(intensity=shake_intensity, duration=12)
        
        if self.explosion_sound:
            self.explosion_sound.play()
        
        if enemy in self.enemies:
            self.enemies.remove(enemy)
        
        if enemy is self.locked:
            self.locked = None
            self.typed_word = ""
        
        if self.target_kills and self.kills >= self.target_kills:
            self.completed = True

    # ============================================================
    # INPUT HANDLING METHODS
    # ============================================================
    
    def handle_typed_char(self, ch):
        """
        X·ª≠ l√Ω k√Ω t·ª± ng∆∞·ªùi ch∆°i g√µ (a-z, A-Z).
        
        Args:
            ch (str): K√Ω t·ª± ng∆∞·ªùi ch∆°i v·ª´a g√µ
            
        Logic:
            - Ch∆∞a lock: T√¨m enemy b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª± 'ch', ch·ªçn enemy g·∫ßn nh·∫•t (nguy hi·ªÉm nh·∫•t)
            - ƒê√£ lock: 
                + G√µ ƒë√∫ng ‚Üí B·∫Øn bullet, tƒÉng progress, ki·ªÉm tra complete
                + G√µ sai ‚Üí B·ªè qua, GI·ªÆ NGUY√äN lock (kh√¥ng auto-switch)
        
        Note:
            Sau khi s·ª≠a lock target system, g√µ sai s·∫Ω KH√îNG t·ª± ƒë·ªông 
            chuy·ªÉn sang enemy kh√°c. Ng∆∞·ªùi ch∆°i ph·∫£i ESC ho·∫∑c Backspace.
        """
        if not self.locked:
            # Ch∆∞a lock ‚Üí T√¨m enemy kh·ªõp k√Ω t·ª± ƒë·∫ßu
            candidates = [e for e in self.enemies if e.required_char() == ch]
            if candidates:
                # Ch·ªçn enemy g·∫ßn nh·∫•t (y l·ªõn nh·∫•t)
                candidates.sort(key=lambda e: e.y, reverse=True)
                self.locked = candidates[0]
                self.typed_word = ch
                self.bullets.append(Bullet(self.locked, ch, self.font, self.locked.progress))
                
                if self.shoot_sound:
                    self.shoot_sound.play()
                
                self.locked.hit_char(ch)
                
                if self.locked.is_complete():
                    self.destroy_enemy(self.locked)
        else:
            # ƒê√£ lock ‚Üí CH·ªà b·∫Øn v√†o enemy ƒë√≥
            if self.locked not in self.enemies:
                self.locked = None
                self.typed_word = ""
                return
            
            if self.locked.required_char() == ch:
                # ‚úÖ G√µ ƒë√∫ng
                self.typed_word += ch
                self.bullets.append(Bullet(self.locked, ch, self.font, self.locked.progress))
                
                if self.shoot_sound:
                    self.shoot_sound.play()
                
                self.locked.hit_char(ch)
                
                if self.locked.is_complete():
                    self.destroy_enemy(self.locked)
            else:
                # ‚ùå G√µ sai ‚Üí B·ªè qua, gi·ªØ nguy√™n lock
                print(f"‚ö†Ô∏è G√µ sai! C·∫ßn g√µ '{self.locked.required_char()}' cho '{self.locked.origin_word}'")

    def handle_keydown(self, event):
        """
        X·ª≠ l√Ω c√°c ph√≠m ƒë·∫∑c bi·ªát (ESC, Backspace).
        
        Args:
            event (pygame.Event): Event KEYDOWN
            
        Keys:
            - ESC: H·ªßy lock target
            - Backspace: X√≥a k√Ω t·ª± cu·ªëi, gi·∫£m progress enemy, tƒÉng HP l·∫°i
        """
        if event.key == pygame.K_ESCAPE:
            self.locked = None
            self.typed_word = ""
            print("üö´ ƒê√£ h·ªßy lock target")
            
        elif event.key == pygame.K_BACKSPACE:
            if self.typed_word and self.locked:
                self.typed_word = self.typed_word[:-1]
                
                if self.locked.progress > 0:
                    self.locked.progress -= 1
                    self.locked.current_hp += 1
                
                if not self.typed_word:
                    self.locked = None
                    print("üîì ƒê√£ unlock target (x√≥a h·∫øt t·ª´)")
            elif self.typed_word and not self.locked:
                self.typed_word = self.typed_word[:-1]

    # ============================================================
    # UPDATE & RENDER METHODS
    # ============================================================
    
    def update(self):
        """
        Update t·∫•t c·∫£ game entities v√† logic (g·ªçi m·ªói frame).
        
        Th·ª© t·ª± update:
            1. Video background (n·∫øu c√≥)
            2. Screen shake effect
            3. Ship invulnerability timer
            4. Bullets (move + remove n·∫øu hit/out of bounds)
            5. Enemies (move + collision check + remove n·∫øu qua m√†n h√¨nh)
            6. Explosions (t·ª± ƒë·ªông remove khi done)
            7. Ship aim angle (theo locked enemy)
        """
        # Video background
        if self.video_background:
            self.video_background.update(self.delta_time * 1000)
        
        # Screen shake
        if self.screen_shake:
            self.screen_shake.update()
            if not self.screen_shake.active:
                self.screen_shake = None
        
        # Invulnerability timers
        if self.ship_invulnerable_timer > 0:
            self.ship_invulnerable_timer -= 1
        if self.ship_flash_timer > 0:
            self.ship_flash_timer -= 1
        
        # Bullets
        for b in self.bullets[:]:
            b.move()
            if b.is_hit() or b.is_out_of_bounds():
                self.bullets.remove(b)

        # Enemies
        for enemy in self.enemies[:]:
            enemy.move(other_enemies=self.enemies)
            
            # Ship collision
            if self.check_ship_collision(enemy):
                self.hit_ship(enemy)
                continue
            
            # Remove n·∫øu r∆°i qua m√†n h√¨nh
            if enemy.y > HEIGHT + 50:
                self.enemies.remove(enemy)
                if enemy is self.locked:
                    self.locked = None
                    self.typed_word = ""

        # Explosions
        for explosion in self.explosions[:]:
            if explosion.done:
                self.explosions.remove(explosion)

        # Ship aim
        self._update_ship_aim()

    def draw(self):
        """
        Render to√†n b·ªô game l√™n m√†n h√¨nh (g·ªçi m·ªói frame).
        
        Th·ª© t·ª± v·∫Ω (t·ª´ xa ƒë·∫øn g·∫ßn):
            1. Background (video/image) v·ªõi screen shake
            2. Enemies v·ªõi shake offset
            3. Bullets v·ªõi shake offset
            4. Explosions v·ªõi shake offset (v·∫Ω TR∆Ø·ªöC ship)
            5. Ship (c√≥ flash effect khi b·ªã hit, xoay khi lock)
            6. HUD (kh√¥ng shake): Score, Lives hearts, Locked, Typing, Kills, Warning
        
        Note:
            - HUD d√πng caching ƒë·ªÉ t·ªëi ∆∞u (ch·ªâ render khi gi√° tr·ªã thay ƒë·ªïi)
            - Screen shake apply cho t·∫•t c·∫£ entities TR·ª™ HUD
        """
        # Screen shake offset
        shake_offset = (0, 0)
        if self.screen_shake:
            shake_offset = self.screen_shake.get_offset()
        
        # Background
        if self.video_background:
            self.video_background.draw(self.win)
        elif self.background:
            self.win.blit(self.background, shake_offset)
        else:
            self.win.fill((0, 0, 0))

        # Enemies (v·ªõi shake)
        for enemy in self.enemies:
            color = YELLOW if enemy is self.locked else WHITE
            # T·∫°o temporary surface ƒë·ªÉ apply shake
            temp_x = enemy.x + shake_offset[0]
            temp_y = enemy.y + shake_offset[1]
            # L∆∞u v·ªã tr√≠ g·ªëc
            orig_x, orig_y = enemy.x, enemy.y
            enemy.x, enemy.y = temp_x, temp_y
            enemy.draw(self.win, self.font, color)
            # Restore v·ªã tr√≠ g·ªëc
            enemy.x, enemy.y = orig_x, orig_y

        # Bullets (v·ªõi shake)
        for bullet in self.bullets:
            # L∆∞u v·ªã tr√≠ g·ªëc
            orig_x, orig_y = bullet.x, bullet.y
            bullet.x += shake_offset[0]
            bullet.y += shake_offset[1]
            bullet.draw(self.win)
            # Restore
            bullet.x, bullet.y = orig_x, orig_y

        # Explosions (v·ªõi shake) - v·∫Ω TR∆Ø·ªöC ship ƒë·ªÉ kh√¥ng che ship
        for explosion in self.explosions:
            # L∆∞u v·ªã tr√≠ g·ªëc
            orig_x, orig_y = explosion.x, explosion.y
            explosion.x += shake_offset[0]
            explosion.y += shake_offset[1]
            explosion.draw(self.win, self.explosion_img)
            # Restore
            explosion.x, explosion.y = orig_x, orig_y

        # Ship (v·ªõi shake v√† flash effect khi b·ªã hit)
        # Hi·ªáu ·ª©ng nh·∫•p nh√°y khi b·ªã hit
        draw_ship_flag = True
        if self.ship_flash_timer > 0:
            # Nh·∫•p nh√°y m·ªói 5 frames
            draw_ship_flag = (self.ship_flash_timer // 5) % 2 == 0
        
        if draw_ship_flag:
            if self.locked and self.locked in self.enemies:
                draw_rotated_ship(self.win, self.angle, shake_offset)
            else:
                draw_ship(self.win, shake_offset)

        # HUD - v·ªõi caching ƒë·ªÉ t·ªëi ∆∞u (KH√îNG shake HUD)
        # Ch·ªâ render l·∫°i khi gi√° tr·ªã thay ƒë·ªïi
        if self._last_score != self.score:
            self._hud_cache['score'] = self.font.render(f"Score: {self.score}", True, WHITE)
            self._last_score = self.score
        
        if self._last_lives != self.lives:
            # Lives v·ªõi text ƒë∆°n gi·∫£n (s·∫Ω v·∫Ω hearts b·∫±ng h√¨nh sau)
            self._hud_cache['lives_text'] = self.font.render(f"Lives:", True, WHITE)
            self._last_lives = self.lives
        
        if self.target_kills and self._last_kills != self.kills:
            self._hud_cache['kills'] = self.font.render(f"Kills: {self.kills}/{self.target_kills}", True, WHITE)
            self._last_kills = self.kills
        
        # V·∫Ω cached surfaces
        self.win.blit(self._hud_cache.get('score', self.font.render("Score: 0", True, WHITE)), (10, 10))
        
        # V·∫Ω Lives v·ªõi hearts t·ª± v·∫Ω
        self.win.blit(self._hud_cache.get('lives_text', self.font.render("Lives:", True, WHITE)), (10, 50))
        self._draw_hearts(80, 58)  # V·∫Ω hearts b√™n c·∫°nh text "Lives:"
        
        locked_text = f"Locked: {self.locked.origin_word if self.locked else '-'}"
        locked_surface = self.font.render(locked_text, True, WHITE)
        self.win.blit(locked_surface, (10, 90))
        
        typing_text = f"Typing: {self.typed_word}"
        typing_surface = self.font.render(typing_text, True, WHITE)
        self.win.blit(typing_surface, (10, HEIGHT - 50))
        
        if self.target_kills:
            self.win.blit(self._hud_cache.get('kills', self.font.render(f"Kills: 0/{self.target_kills}", True, WHITE)), (10, 130))
        
        # Warning khi c√≥ enemy g·∫ßn phi thuy·ªÅn
        dangerous_enemies = [e for e in self.enemies if e.y > SHIP_Y - 100]
        if dangerous_enemies:
            warning_text = "‚ö†Ô∏è DANGER! ‚ö†Ô∏è"
            warning_color = (255, 50, 50) if (pygame.time.get_ticks() // 200) % 2 == 0 else (255, 150, 50)
            warning_surface = self.font.render(warning_text, True, warning_color)
            warning_rect = warning_surface.get_rect(center=(WIDTH // 2, HEIGHT - 100))
            self.win.blit(warning_surface, warning_rect)

        pygame.display.flip()

    # ============================================================
    # MAIN GAME LOOP
    # ============================================================
    
    def run(self):
        """
        V√≤ng l·∫∑p ch√≠nh c·ªßa game.
        
        Flow:
            1. Calculate delta time (FPS control)
            2. Process events (QUIT, KEYDOWN, TEXTINPUT)
            3. Spawn enemies
            4. Update game logic
            5. Check end conditions (lives <= 0 ho·∫∑c target_kills ƒë·∫°t ƒë∆∞·ª£c)
            6. Render
            7. Repeat
        
        End conditions:
            - Classic mode: lives <= 0
            - Challenge mode: lives <= 0 ho·∫∑c kills >= target_kills
        
        Post-loop:
            - Stop music
            - Show Game Over screen (ch·ªâ Classic mode)
            - Challenge mode: kh√¥ng show Game Over (do challenge.py x·ª≠ l√Ω)
        """
        running = True
        
        while running:
            # Delta time
            dt_ms = self.clock.tick(FPS)
            self.delta_time = dt_ms / 1000.0
            
            # Events
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    self.handle_keydown(event)
                elif event.type == pygame.TEXTINPUT:
                    self.handle_typed_char(event.text)

            # Game logic
            self.spawn_enemy()
            self.update()

            # End conditions
            if self.lives <= 0 or (self.target_kills and self.completed):
                running = False

            # Render
            self.draw()

        # ============================================================
        # POST-GAME CLEANUP
        # ============================================================
        pygame.key.stop_text_input()
        
        if self.music_channel:
            self.music_channel.stop()

        # Game Over screen (ch·ªâ Classic mode)
        if not self.target_kills:
            if self.background:
                self.win.blit(self.background, (0, 0))
            else:
                self.win.fill((0, 0, 0))
            
            end_text = self.font.render(f"Game Over! Score: {self.score}", True, WHITE)
            text_rect = end_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
            self.win.blit(end_text, text_rect)
            pygame.display.flip()
            pygame.time.wait(2000)  