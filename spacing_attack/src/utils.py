# ============================================================
# utils.py - C√°c h√†m ti·ªán √≠ch d√πng chung trong game
# ============================================================
# File n√†y ch·ª©a c√°c h√†m helper ƒë·ªÉ:
# - Load h√¨nh ·∫£nh, √¢m thanh, font
# - X·ª≠ l√Ω JSON (save/load)
# - Qu·∫£n l√Ω ti·∫øn tr√¨nh game
# - Li·ªát k√™ background files

import pygame  # Th∆∞ vi·ªán game engine
import json    # X·ª≠ l√Ω file JSON (save data)
from io import BytesIO  # ƒê·ªçc/ghi d·ªØ li·ªáu trong b·ªô nh·ªõ
from pathlib import Path  # X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file/folder
from .settings import IMAGE_DIR, SOUND_DIR, PROGRESS_FILE  # Import paths t·ª´ settings
from PIL import Image  # Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh (Pillow)

# ============================================================
# H√ÄM X·ª¨ L√ù JSON AN TO√ÄN
# ============================================================

def safe_json_load(path: Path, default):
    """
    Load file JSON m·ªôt c√°ch an to√†n.
    
    Args:
        path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON
        default: Gi√° tr·ªã m·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ n·∫øu load th·∫•t b·∫°i
        
    Returns:
        D·ªØ li·ªáu t·ª´ JSON ho·∫∑c gi√° tr·ªã default n·∫øu l·ªói
    """
    try:
        if Path(path).exists():  # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            with open(path, "r", encoding="utf-8") as f:  # M·ªü file v·ªõi UTF-8
                return json.load(f)  # Parse JSON th√†nh dict/list
    except Exception:
        pass  # B·ªè qua m·ªçi l·ªói (file corrupt, permission denied, etc.)
    return default  # Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh


def safe_json_save(path: Path, data):
    """
    L∆∞u d·ªØ li·ªáu v√†o file JSON m·ªôt c√°ch an to√†n.
    T·ª± ƒë·ªông t·∫°o th∆∞ m·ª•c cha n·∫øu ch∆∞a t·ªìn t·∫°i.
    
    Args:
        path: ƒê∆∞·ªùng d·∫´n file c·∫ßn l∆∞u
        data: D·ªØ li·ªáu (dict/list) c·∫ßn l∆∞u
    """
    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)  # T·∫°o th∆∞ m·ª•c cha (mkdir -p)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)  # L∆∞u JSON c√≥ format ƒë·∫πp


# ============================================================
# H√ÄM LOAD H√åNH ·∫¢NH (H·ªñ TR·ª¢ PNG, JPG)
# ============================================================

def load_image(name, size=None):
    """
    Load h√¨nh ·∫£nh t·ª´ th∆∞ m·ª•c IMAGE_DIR v√† t·ª± ƒë·ªông x·ª≠ l√Ω.
    
    Args:
        name: T√™n file ·∫£nh (vd: "spaceship.png")
        size: Tuple (width, height) ƒë·ªÉ resize. None = gi·ªØ nguy√™n k√≠ch th∆∞·ªõc
        
    Returns:
        pygame.Surface ƒë√£ convert_alpha() (t·ªëi ∆∞u cho v·∫Ω)
        
    Raises:
        Exception n·∫øu kh√¥ng load ƒë∆∞·ª£c ·∫£nh
    """
    path = IMAGE_DIR / name  # Gh√©p ƒë∆∞·ªùng d·∫´n: IMAGE_DIR + name
    
    try:
        if path.suffix.lower() == ".png":
            # ===== X·ª¨ L√ù ƒê·ªòC BI·ªÜT CHO PNG =====
            # PNG c√≥ th·ªÉ ch·ª©a ICC profile/EXIF metadata ‚Üí g√¢y warning
            # ‚Üí X√≥a metadata v√† re-save trong memory
            
            with Image.open(path) as im:  # M·ªü ·∫£nh b·∫±ng Pillow
                im = im.convert("RGBA")  # Chuy·ªÉn sang RGBA (c√≥ alpha channel)
                im.info.pop("icc_profile", None)  # X√≥a ICC color profile
                im.info.pop("exif", None)         # X√≥a EXIF metadata
                
                # L∆∞u l·∫°i PNG "s·∫°ch" v√†o memory buffer
                buf = BytesIO()
                im.save(buf, format="PNG", optimize=True)
                buf.seek(0)  # V·ªÅ ƒë·∫ßu buffer ƒë·ªÉ ƒë·ªçc
                
                # Load v√†o pygame t·ª´ buffer
                surf = pygame.image.load(buf, name)
        else:
            # ===== X·ª¨ L√ù TH∆Ø·ªúNG CHO JPG, GIF, ETC. =====
            surf = pygame.image.load(str(path))

        # Resize n·∫øu c√≥ y√™u c·∫ßu
        if size:
            surf = pygame.transform.smoothscale(surf, size)  # Scale m∆∞·ª£t m√†
        
        return surf.convert_alpha()  # Convert ƒë·ªÉ v·∫Ω nhanh h∆°n
        
    except Exception as e:
        print(f"[‚ùå load_image] Kh√¥ng th·ªÉ t·∫£i '{name}': {e}")
        raise  # Throw l·ªói ra ngo√†i ƒë·ªÉ caller x·ª≠ l√Ω


# ============================================================
# H√ÄM LOAD √ÇM THANH (T·ª∞ ƒê·ªòNG KH·ªûI T·∫†O MIXER)
# ============================================================

def load_sound(filename):
    """
    Load file √¢m thanh t·ª´ th∆∞ m·ª•c SOUND_DIR.
    T·ª± ƒë·ªông kh·ªüi t·∫°o pygame.mixer n·∫øu ch∆∞a c√≥.
    H·ªó tr·ª£ c·∫£ script Python v√† .exe (d√πng SOUND_DIR t·ª´ settings).
    
    Args:
        filename: T√™n file √¢m thanh (vd: "ban.wav", "music1.mp3")
        
    Returns:
        pygame.mixer.Sound object ho·∫∑c None n·∫øu l·ªói
    """
    # ===== KH·ªûI T·∫†O MIXER (N·∫æU CH∆ØA C√ì) =====
    if pygame.mixer.get_init() is None:  # Ki·ªÉm tra mixer ƒë√£ init ch∆∞a
        try:
            pygame.mixer.init()  # Kh·ªüi t·∫°o audio system
            print("[‚úÖ Mixer ƒë√£ kh·ªüi t·∫°o]")
        except Exception as e:
            print(f"[‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi t·∫°o mixer]: {e}")
            return None  # Kh√¥ng c√≥ audio ‚Üí tr·∫£ v·ªÅ None

    # ===== T√åM FILE √ÇM THANH =====
    # SOUND_DIR t·ª± ƒë·ªông l√† ƒë∆∞·ªùng d·∫´n ƒë√∫ng (script hay .exe)
    sound_path = SOUND_DIR / filename
    
    print(f"[üîç Load sound]: {sound_path}")
    
    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if not sound_path.exists():
        print(f"[‚ùå File kh√¥ng t·ªìn t·∫°i]: {sound_path}")
        return None
    
    # ===== LOAD √ÇM THANH =====
    try:
        sound = pygame.mixer.Sound(str(sound_path))  # Load file v√†o Sound object
        print(f"[‚úÖ Sound loaded]: {filename}")
        return sound
    except Exception as e:
        print(f"[‚ùå L·ªói load sound '{filename}']: {e}")
        return None  # Tr·∫£ v·ªÅ None n·∫øu l·ªói (game v·∫´n ch·∫°y ƒë∆∞·ª£c, ch·ªâ kh√¥ng c√≥ √¢m thanh)


# ============================================================
# H√ÄM LOAD FONT CH·ªÆ (FREETYPE)
# ============================================================

def load_font(path_like, size: int):
    """
    Load font ch·ªØ t·ª´ file TTF/OTF ho·∫∑c d√πng font m·∫∑c ƒë·ªãnh.
    S·ª≠ d·ª•ng pygame.freetype (h·ªó tr·ª£ Unicode t·ªët h∆°n pygame.font).
    
    Args:
        path_like: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file font (Path object ho·∫∑c str). None = font m·∫∑c ƒë·ªãnh
        size: K√≠ch th∆∞·ªõc font (pixel)
        
    Returns:
        pygame.freetype.Font object
    """
    import pygame.freetype as ft
    
    # Kh·ªüi t·∫°o FreeType module n·∫øu ch∆∞a c√≥
    if not ft.get_init():
        ft.init()

    font_path = None  # M·∫∑c ƒë·ªãnh d√πng system font
    
    # ===== KI·ªÇM TRA ƒê∆Ø·ªúNG D·∫™N FONT =====
    try:
        if path_like:
            p = Path(path_like)
            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i v√† kh√¥ng r·ªóng
            if p.is_file() and p.stat().st_size > 0:
                font_path = str(p)  # D√πng font n√†y
    except Exception as e:
        print(f"[load_font] path check error: {e}")

    # ===== LOAD FONT =====
    try:
        return ft.Font(font_path, size)  # Load font v·ªõi size
    except Exception as e:
        print(f"[load_font] open '{font_path}' failed: {e} -> fallback default")
        return ft.Font(None, size)  # Fallback sang font m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng


# ============================================================
# H√ÄM T√çNH S·ªê SAO (STARS) D·ª∞A TR√äN S·ªê M·∫†NG C√íN L·∫†I
# ============================================================

def stars_from_lives(lives: int) -> int:
    """
    Chuy·ªÉn ƒë·ªïi s·ªë m·∫°ng c√≤n l·∫°i th√†nh s·ªë sao (‚òÖ).
    D√πng trong Challenge mode khi ho√†n th√†nh level.
    
    Args:
        lives: S·ªë m·∫°ng c√≤n l·∫°i (0-3)
        
    Returns:
        S·ªë sao (0-3):
        - 3 m·∫°ng ‚Üí 3 sao ‚òÖ‚òÖ‚òÖ (ho√†n h·∫£o)
        - 2 m·∫°ng ‚Üí 2 sao ‚òÖ‚òÖ‚òÜ
        - 1 m·∫°ng ‚Üí 1 sao ‚òÖ‚òÜ‚òÜ
        - 0 m·∫°ng ‚Üí 0 sao ‚òÜ‚òÜ‚òÜ (thua)
    """
    if lives >= 3:
        return 3
    elif lives == 2:
        return 2
    elif lives == 1:
        return 1
    return 0  # 0 m·∫°ng = 0 sao


# ============================================================
# LOAD / SAVE TI·∫æN TR√åNH NG∆Ø·ªúI CH∆†I (CHALLENGE MODE)
# ============================================================

def load_progress() -> dict:
    """
    Load ti·∫øn tr√¨nh Challenge mode t·ª´ file progress.json.
    
    Returns:
        Dict v·ªõi 2 key:
        - "unlocked_level": Level cao nh·∫•t ƒë√£ m·ªü (1-10)
        - "stars": List 10 s·ªë sao cho m·ªói level [0-3, 0-3, ...]
        
    N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói, tr·∫£ v·ªÅ progress m·∫∑c ƒë·ªãnh:
        {"unlocked_level": 1, "stars": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
    """
    try:
        if PROGRESS_FILE.exists():  # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)  # Parse JSON
                
                # L·∫•y unlocked_level (gi·ªõi h·∫°n 1-10)
                unlocked = int(data.get("unlocked_level", 1))
                
                # L·∫•y stars list (ph·∫£i c√≥ ƒë√∫ng 10 ph·∫ßn t·ª≠)
                stars = data.get("stars", [0] * 10)
                if not isinstance(stars, list) or len(stars) != 10:
                    stars = [0] * 10  # Reset n·∫øu kh√¥ng ƒë√∫ng format
                
                # Gi·ªõi h·∫°n m·ªói gi√° tr·ªã sao trong kho·∫£ng 0-3
                stars = [max(0, min(3, int(x))) for x in stars]
                
                return {
                    "unlocked_level": max(1, min(10, unlocked)),  # Clamp 1-10
                    "stars": stars,
                }
    except Exception as e:
        print("[progress] load error:", e)
    
    # Tr·∫£ v·ªÅ progress m·∫∑c ƒë·ªãnh n·∫øu l·ªói
    return {"unlocked_level": 1, "stars": [0] * 10}


def save_progress(unlocked_level: int, stars: list[int]) -> None:
    """
    L∆∞u ti·∫øn tr√¨nh Challenge mode v√†o file progress.json.
    
    Args:
        unlocked_level: Level cao nh·∫•t ƒë√£ unlock (1-10)
        stars: List 10 s·ªë sao [0-3] cho t·ª´ng level
        
    Note:
        - T·ª± ƒë·ªông t·∫°o th∆∞ m·ª•c save/ n·∫øu ch∆∞a c√≥
        - T·ª± ƒë·ªông validate v√† clamp gi√° tr·ªã h·ª£p l·ªá
    """
    try:
        # T·∫°o th∆∞ m·ª•c save n·∫øu ch∆∞a c√≥
        PROGRESS_FILE.parent.mkdir(exist_ok=True)
        
        # Validate v√† clamp unlocked_level (1-10)
        unlocked_level = max(1, min(10, int(unlocked_level)))
        
        # Validate stars list
        if not isinstance(stars, list) or len(stars) != 10:
            stars = [0] * 10  # Reset n·∫øu kh√¥ng h·ª£p l·ªá
        
        # Clamp m·ªói gi√° tr·ªã sao (0-3)
        stars = [max(0, min(3, int(x))) for x in stars]
        
        # L∆∞u v√†o file JSON
        with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
            json.dump({"unlocked_level": unlocked_level, "stars": stars}, f)
            
    except Exception as e:
        print("[progress] save error:", e)


# ============================================================
# LI·ªÜT K√ä V√Ä KI·ªÇM TRA BACKGROUND FILES
# ============================================================

def list_background_files() -> list[str]:
    """
    Li·ªát k√™ t·∫•t c·∫£ file background (·∫£nh + video) trong th∆∞ m·ª•c backgrounds/.
    
    Returns:
        List t√™n file (relative path):
        ["backgrounds/bg1.jpg", "backgrounds/bg2.mp4", ...]
        
    H·ªó tr·ª£:
        - Images: .jpg, .jpeg, .png
        - Videos: .mp4, .avi, .mov, .mkv
    """
    # ƒê·ªãnh nghƒ©a c√°c extension ƒë∆∞·ª£c h·ªó tr·ª£
    image_exts = {".jpg", ".jpeg", ".png"}
    video_exts = {".mp4", ".avi", ".mov", ".mkv"}
    
    bg_dir = IMAGE_DIR / "backgrounds"  # Th∆∞ m·ª•c ch·ª©a backgrounds
    files = []
    
    try:
        # Duy·ªát qua t·∫•t c·∫£ file trong th∆∞ m·ª•c
        for p in bg_dir.iterdir():
            # Ch·ªâ l·∫•y file (kh√¥ng l·∫•y folder)
            if p.is_file():
                ext = p.suffix.lower()  # L·∫•y extension (.jpg, .mp4, ...)
                
                # Ki·ªÉm tra c√≥ ph·∫£i ·∫£nh ho·∫∑c video kh√¥ng
                if ext in image_exts or ext in video_exts:
                    # Chuy·ªÉn sang relative path (t∆∞∆°ng ƒë·ªëi IMAGE_DIR)
                    # vd: "backgrounds/bg1.jpg"
                    rel_path = str(p.relative_to(IMAGE_DIR)).replace("\\", "/")
                    files.append(rel_path)
                    
    except FileNotFoundError:
        pass  # Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i ‚Üí tr·∫£ v·ªÅ list r·ªóng
    
    return sorted(files)  # S·∫Øp x·∫øp theo t√™n


def is_video_file(filename: str) -> bool:
    """
    Ki·ªÉm tra xem file c√≥ ph·∫£i video kh√¥ng (d·ª±a tr√™n extension).
    
    Args:
        filename: T√™n file (vd: "backgrounds/video1.mp4")
        
    Returns:
        True n·∫øu l√† video, False n·∫øu l√† ·∫£nh
    """
    video_exts = {".mp4", ".avi", ".mov", ".mkv"}
    return Path(filename).suffix.lower() in video_exts


# ============================================================
# √ÅNH X·∫† BACKGROUND ‚Üí MUSIC (BACKGROUND MUSIC MATCHING)
# ============================================================

def get_music_for_background(background_name: str) -> str:
    """
    Tr·∫£ v·ªÅ t√™n file nh·∫°c ph√π h·ª£p v·ªõi background ƒëang ch·ªçn.
    M·ªói background c√≥ 1 b√†i nh·∫°c ri√™ng ƒë·ªÉ t·∫°o kh√¥ng kh√≠ ph√π h·ª£p.
    
    Args:
        background_name: T√™n background file
                        vd: "backgrounds/background1.jpg"
        
    Returns:
        T√™n file nh·∫°c t∆∞∆°ng ·ª©ng
        vd: "music1.mp3"
        
    Note:
        - N·∫øu background kh√¥ng c√≥ trong map ‚Üí tr·∫£ v·ªÅ "music1.mp3" (default)
        - C√≥ th·ªÉ m·ªü r·ªông map n√†y ƒë·ªÉ th√™m backgrounds m·ªõi
    """
    # Dictionary √°nh x·∫°: background ‚Üí music
    bg_music_map = {
        "backgrounds/background1.jpg": "music1.mp3",
        "backgrounds/background2.png": "music2.mp3",
        "backgrounds/background3.jpg": "music3.mp3",
        "backgrounds/background4.jpg": "music4.mp3",
        "backgrounds/background5.jpg": "music5.mp3",
        "backgrounds/background6.jpg": "music6.mp3",
    }
    
    # Lookup: T√¨m music t∆∞∆°ng ·ª©ng ho·∫∑c d√πng music1.mp3 l√†m default
    return bg_music_map.get(background_name, "music1.mp3")


# ============================================================
# CH·ª§P M√ÄN H√åNH (SCREENSHOT)
# ============================================================

def take_screenshot(surface: pygame.Surface) -> str:
    """
    Ch·ª•p m√†n h√¨nh game v√† l∆∞u v√†o file PNG.
    
    Args:
        surface: pygame.Surface c·∫ßn ch·ª•p (th∆∞·ªùng l√† screen)
        
    Returns:
        ƒê∆∞·ªùng d·∫´n file ƒë√£ l∆∞u ho·∫∑c None n·∫øu l·ªói
    """
    from datetime import datetime
    
    try:
        # T·∫°o th∆∞ m·ª•c screenshots n·∫øu ch∆∞a c√≥
        screenshot_dir = Path.cwd() / "screenshots"
        screenshot_dir.mkdir(exist_ok=True)
        
        # T·∫°o t√™n file v·ªõi timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"screenshot_{timestamp}.png"
        filepath = screenshot_dir / filename
        
        # L∆∞u surface th√†nh PNG
        pygame.image.save(surface, str(filepath))
        
        print(f"[üì∏ Screenshot saved]: {filepath}")
        return str(filepath)
        
    except Exception as e:
        print(f"[‚ùå Screenshot failed]: {e}")
        return None
