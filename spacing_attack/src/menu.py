# ============================================================
# SPACE TYPING GAME - MAIN MENU
# ============================================================
# File: menu.py
# M√¥ t·∫£: Giao di·ªán menu ch√≠nh v·ªõi buttons v√† hi·ªáu ·ª©ng
# Ch·ª©c nƒÉng ch√≠nh:
#   - Button class v·ªõi hover effects, shadow, scale animation
#   - MainMenu class ƒëi·ªÅu khi·ªÉn giao di·ªán menu ch√≠nh
#   - Gradient background v·ªõi overlay
#   - Callbacks ƒë·ªÉ chuy·ªÉn state (Classic, Challenge, Leaderboard, Exit)
#   - X·ª≠ l√Ω input (mouse hover, click, ESC key)
# ============================================================

import pygame
import pygame.freetype as ft
from .utils import load_font
from .settings import WIDTH, HEIGHT, WHITE, FONT_BOLD

# ==============================
# üé® BUTTON CLASS
# ==============================
class Button:
    """
    N√∫t b·∫•m v·ªõi hi·ªáu ·ª©ng hover, shadow v√† scale animation.
    
    Attributes:
        text (str): Text hi·ªÉn th·ªã tr√™n n√∫t
        rect (pygame.Rect): V√πng n√∫t (ƒë·ªÉ detect collision)
        on_click (callable): Callback khi click
        hover (bool): ƒêang hover hay kh√¥ng
        scale_factor (float): T·ª∑ l·ªá ph√≥ng to khi hover (1.0 = normal, 1.05 = hover)
    
    Hi·ªáu ·ª©ng:
        - Shadow: B√≥ng ƒë·ªï ph√≠a sau n√∫t
        - Hover color: ƒê·ªïi m√†u khi hover
        - Border: Vi·ªÅn s√°ng khi hover
        - Scale: Ph√≥ng to nh·∫π 5% khi hover
    """
    def __init__(self, text, center, on_click, w=280, h=70):
        """
        Kh·ªüi t·∫°o Button.
        
        Args:
            text (str): Text hi·ªÉn th·ªã
            center (tuple): To·∫° ƒë·ªô trung t√¢m (x, y)
            on_click (callable): H√†m callback khi click
            w (int): Chi·ªÅu r·ªông n√∫t (default: 280)
            h (int): Chi·ªÅu cao n√∫t (default: 70)
        """
        self.text = text
        self.rect = pygame.Rect(0, 0, w, h)
        self.rect.center = center
        self.on_click = on_click
        self.hover = False
        self.font = load_font(FONT_BOLD, 32)

        # üé® M√†u s·∫Øc & hi·ªáu ·ª©ng
        self.base_color = (40, 40, 60)       # M√†u n·ªÅn b√¨nh th∆∞·ªùng
        self.hover_color = (80, 80, 120)     # M√†u n·ªÅn khi hover
        self.border_color = (120, 120, 200)  # M√†u vi·ªÅn khi hover
        self.shadow_offset = 5               # Kho·∫£ng c√°ch shadow
        self.scale_factor = 1.0              # Hi·ªáu ·ª©ng ph√≥ng nh·∫π khi hover

    def draw(self, surf):
        """
        V·∫Ω n√∫t l√™n surface.
        
        Args:
            surf (pygame.Surface): Surface ƒë·ªÉ v·∫Ω
            
        V·∫Ω theo th·ª© t·ª±:
            1. Shadow (ph√≠a sau, offset 5px)
            2. Background (m√†u thay ƒë·ªïi khi hover)
            3. Border (ch·ªâ khi hover)
            4. Text (cƒÉn gi·ªØa)
        """
        # Scale nh·∫π khi hover
        current_w = int(self.rect.width * self.scale_factor)
        current_h = int(self.rect.height * self.scale_factor)
        scaled_rect = pygame.Rect(0, 0, current_w, current_h)
        scaled_rect.center = self.rect.center

        # V·∫Ω shadow nh·∫π ph√≠a sau
        shadow_rect = scaled_rect.move(self.shadow_offset, self.shadow_offset)
        pygame.draw.rect(surf, (10, 10, 20), shadow_rect, border_radius=16)

        # V·∫Ω n·ªÅn n√∫t
        bg_color = self.hover_color if self.hover else self.base_color
        pygame.draw.rect(surf, bg_color, scaled_rect, border_radius=16)

        # V·∫Ω vi·ªÅn khi hover
        if self.hover:
            pygame.draw.rect(surf, self.border_color, scaled_rect, 3, border_radius=16)

        # Render ch·ªØ (cƒÉn gi·ªØa)
        text_surf, _ = self.font.render(self.text, WHITE)
        surf.blit(text_surf, text_surf.get_rect(center=scaled_rect.center))

    def handle(self, event):
        """
        X·ª≠ l√Ω input events cho n√∫t.
        
        Args:
            event (pygame.Event): Event c·∫ßn x·ª≠ l√Ω
            
        Events:
            - MOUSEMOTION: Update hover state v√† scale_factor
            - MOUSEBUTTONDOWN (left click): G·ªçi callback n·∫øu click v√†o n√∫t
        """
        if event.type == pygame.MOUSEMOTION:
            hovering = self.rect.collidepoint(event.pos)
            if hovering and not self.hover:
                self.scale_factor = 1.05  # Ph√≥ng nh·∫π khi m·ªõi hover
            elif not hovering and self.hover:
                self.scale_factor = 1.0   # Tr·ªü v·ªÅ b√¨nh th∆∞·ªùng khi r·ªùi kh·ªèi
            self.hover = hovering

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if self.rect.collidepoint(event.pos):
                self.on_click()  # G·ªçi callback

# ==============================
# üåå MAIN MENU CLASS
# ==============================
    def __init__(self, text, center, on_click, w=280, h=70):
        self.text = text
        self.rect = pygame.Rect(0, 0, w, h)
        self.rect.center = center
        self.on_click = on_click
        self.hover = False
        self.font = load_font(FONT_BOLD, 32)

        # üé® m√†u & hi·ªáu ·ª©ng
        self.base_color = (40, 40, 60)
        self.hover_color = (80, 80, 120)
        self.border_color = (120, 120, 200)
        self.shadow_offset = 5
        self.scale_factor = 1.0  # hi·ªáu ·ª©ng ph√≥ng nh·∫π khi hover

    def draw(self, surf):
        # Scale nh·∫π khi hover
        current_w = int(self.rect.width * self.scale_factor)
        current_h = int(self.rect.height * self.scale_factor)
        scaled_rect = pygame.Rect(0, 0, current_w, current_h)
        scaled_rect.center = self.rect.center

        # V·∫Ω shadow nh·∫π ph√≠a sau
        shadow_rect = scaled_rect.move(self.shadow_offset, self.shadow_offset)
        pygame.draw.rect(surf, (10, 10, 20), shadow_rect, border_radius=16)

        # V·∫Ω n·ªÅn n√∫t
        bg_color = self.hover_color if self.hover else self.base_color
        pygame.draw.rect(surf, bg_color, scaled_rect, border_radius=16)

        # V·∫Ω vi·ªÅn khi hover
        if self.hover:
            pygame.draw.rect(surf, self.border_color, scaled_rect, 3, border_radius=16)

        # Render ch·ªØ
        text_surf, _ = self.font.render(self.text, WHITE)
        surf.blit(text_surf, text_surf.get_rect(center=scaled_rect.center))

    def handle(self, event):
        if event.type == pygame.MOUSEMOTION:
            hovering = self.rect.collidepoint(event.pos)
            if hovering and not self.hover:
                self.scale_factor = 1.05  # ph√≥ng nh·∫π khi m·ªõi hover
            elif not hovering and self.hover:
                self.scale_factor = 1.0
            self.hover = hovering

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if self.rect.collidepoint(event.pos):
                self.on_click()

# ==============================
# üåå MAIN MENU CLASS
# ==============================
class MainMenu:
    """
    Giao di·ªán menu ch√≠nh c·ªßa game.
    
    Attributes:
        buttons (list): Danh s√°ch 3 n√∫t ch√≠nh (Classic, Challenge, Leaderboard)
        exit_button (Button): N√∫t Exit ·ªü g√≥c tr√°i d∆∞·ªõi
        should_quit (bool): Flag ƒë·ªÉ b√°o hi·ªáu tho√°t game
        background (Surface): Background image (optional)
    
    Input:
        - Mouse: Hover v√† click v√†o buttons
        - ESC: Tho√°t game (set should_quit = True)
    
    Layout:
        - Title: "SPACE TYPING" (center, top)
        - Subtitle: "Master your speed & accuracy"
        - 3 buttons ch√≠nh: Classic, Challenge, Leaderboard (center)
        - Exit button: G√≥c tr√°i d∆∞·ªõi
    """
    def __init__(self, on_classic, on_challenge, on_leaderboard, background=None):
        """
        Kh·ªüi t·∫°o MainMenu.
        
        Args:
            on_classic (callable): Callback khi ch·ªçn Classic
            on_challenge (callable): Callback khi ch·ªçn Challenge
            on_leaderboard (callable): Callback khi ch·ªçn Leaderboard
            background (Surface, optional): Background image
        """
        self.on_classic = on_classic
        self.on_challenge = on_challenge
        self.on_leaderboard = on_leaderboard
        self.title_font = load_font(FONT_BOLD, 64)
        self.subtitle_font = load_font(FONT_BOLD, 22)
        self.should_quit = False  # Flag ƒë·ªÉ b√°o hi·ªáu tho√°t game

        cx = WIDTH // 2
        cy = HEIGHT // 2

        # 3 n√∫t ch√≠nh
        self.buttons = [
            Button("Classic",     (cx, cy - 50), self.on_classic),
            Button("Challenge",   (cx, cy + 40), self.on_challenge),
            Button("Leaderboard", (cx, cy + 130), self.on_leaderboard),
        ]
        
        # N√∫t Exit ·ªü g√≥c tr√°i d∆∞·ªõi
        self.exit_button = Button("Exit", (100, HEIGHT - 50), self.on_exit, w=150, h=50)
        
        self.background = background
    
    def on_exit(self):
        """Callback khi nh·∫•n n√∫t Exit - set flag should_quit = True."""
        self.should_quit = True

    def _draw_gradient_background(self, surf):
        """
        V·∫Ω gradient background t·ª´ t·ªëi (top) ƒë·∫øn s√°ng (bottom).
        
        Args:
            surf (pygame.Surface): Surface ƒë·ªÉ v·∫Ω
            
        Colors:
            - Top: (10, 10, 25) - Xanh ƒëen t·ªëi
            - Bottom: (35, 35, 65) - Xanh ƒëen s√°ng h∆°n
        """
        top_color = (10, 10, 25)
        bottom_color = (35, 35, 65)
        gradient = pygame.Surface((1, HEIGHT))
        for y in range(HEIGHT):
            ratio = y / HEIGHT
            c = [
                int(top_color[i] + (bottom_color[i] - top_color[i]) * ratio)
                for i in range(3)
            ]
            gradient.set_at((0, y), c)
        gradient = pygame.transform.scale(gradient, (WIDTH, HEIGHT))
        surf.blit(gradient, (0, 0))

    def draw(self, surf):
        """
        V·∫Ω to√†n b·ªô menu l√™n surface.
        
        Args:
            surf (pygame.Surface): Surface ƒë·ªÉ v·∫Ω
            
        Th·ª© t·ª± v·∫Ω:
            1. Gradient background
            2. Background image (n·∫øu c√≥) v·ªõi overlay t·ªëi 100 alpha
            3. Title "SPACE TYPING" v·ªõi glow effect
            4. Subtitle "Master your speed & accuracy"
            5. 3 buttons ch√≠nh
            6. Exit button
        """
        # Gradient n·ªÅn
        self._draw_gradient_background(surf)

        # N·∫øu c√≥ background ‚Üí ph·ªß m·ªù (overlay alpha 100)
        if self.background:
            bg = pygame.transform.scale(self.background, (WIDTH, HEIGHT))
            surf.blit(bg, (0, 0))
            overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
            overlay.fill((0, 0, 0, 100))  # ƒêen m·ªù 100 alpha
            surf.blit(overlay, (0, 0))

        # Ti√™u ƒë·ªÅ v·ªõi glow effect
        title_surf, _ = self.title_font.render("SPACE TYPING", WHITE)
        glow = pygame.Surface(title_surf.get_size(), pygame.SRCALPHA)
        pygame.draw.rect(glow, (120, 120, 255, 60), glow.get_rect(), border_radius=20)
        surf.blit(glow, title_surf.get_rect(center=(WIDTH // 2, 140)))
        surf.blit(title_surf, title_surf.get_rect(center=(WIDTH // 2, 140)))

        # Subtitle
        sub_surf, _ = self.subtitle_font.render("Master your speed & accuracy", (180, 180, 200))
        surf.blit(sub_surf, sub_surf.get_rect(center=(WIDTH // 2, 190)))

        # V·∫Ω c√°c n√∫t
        for b in self.buttons:
            b.draw(surf)
        
        # V·∫Ω n√∫t Exit
        self.exit_button.draw(surf)

    def handle(self, event):
        """
        X·ª≠ l√Ω input events cho menu ch√≠nh.
        
        Args:
            event (pygame.Event): Event c·∫ßn x·ª≠ l√Ω
            
        Events:
            - Mouse events: Chuy·ªÉn cho buttons x·ª≠ l√Ω
            
        Note: 
            ESC kh√¥ng ƒë∆∞·ª£c d√πng ƒë·ªÉ tho√°t t·ª´ menu ch√≠nh (ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi ESC t·ª´ 
            c√°c m√†n h√¨nh con). Ng∆∞·ªùi d√πng ph·∫£i d√πng n√∫t Exit ho·∫∑c n√∫t X c·ªßa c·ª≠a s·ªï.
        """
        # X·ª≠ l√Ω c√°c n√∫t menu
        for b in self.buttons:
            b.handle(event)
        
        # X·ª≠ l√Ω n√∫t Exit
        self.exit_button.handle(event)